# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

from ._configuration_async import MonitorClientConfiguration
from .operations_async import AutoscaleSettingsOperations
from .operations_async import Operations
from .operations_async import AlertRuleIncidentsOperations
from .operations_async import AlertRulesOperations
from .operations_async import LogProfilesOperations
from .operations_async import DiagnosticSettingsOperations
from .operations_async import DiagnosticSettingsCategoryOperations
from .operations_async import ActionGroupsOperations
from .operations_async import ActivityLogAlertsOperations
from .operations_async import ActivityLogsOperations
from .operations_async import EventCategoriesOperations
from .operations_async import TenantActivityLogsOperations
from .operations_async import MetricDefinitionsOperations
from .operations_async import MetricsOperations
from .operations_async import MetricBaselineOperations
from .operations_async import BaselinesOperations
from .operations_async import MetricAlertsOperations
from .operations_async import MetricAlertsStatusOperations
from .operations_async import ScheduledQueryRulesOperations
from .operations_async import MetricNamespacesOperations
from .operations_async import VMInsightsOperations
from .. import models


class MonitorClient(object):
    """Monitor Management Client.

    :ivar autoscale_settings: AutoscaleSettingsOperations operations
    :vartype autoscale_settings: monitor_client.aio.operations_async.AutoscaleSettingsOperations
    :ivar operations: Operations operations
    :vartype operations: monitor_client.aio.operations_async.Operations
    :ivar alert_rule_incidents: AlertRuleIncidentsOperations operations
    :vartype alert_rule_incidents: monitor_client.aio.operations_async.AlertRuleIncidentsOperations
    :ivar alert_rules: AlertRulesOperations operations
    :vartype alert_rules: monitor_client.aio.operations_async.AlertRulesOperations
    :ivar log_profiles: LogProfilesOperations operations
    :vartype log_profiles: monitor_client.aio.operations_async.LogProfilesOperations
    :ivar diagnostic_settings: DiagnosticSettingsOperations operations
    :vartype diagnostic_settings: monitor_client.aio.operations_async.DiagnosticSettingsOperations
    :ivar diagnostic_settings_category: DiagnosticSettingsCategoryOperations operations
    :vartype diagnostic_settings_category: monitor_client.aio.operations_async.DiagnosticSettingsCategoryOperations
    :ivar action_groups: ActionGroupsOperations operations
    :vartype action_groups: monitor_client.aio.operations_async.ActionGroupsOperations
    :ivar activity_log_alerts: ActivityLogAlertsOperations operations
    :vartype activity_log_alerts: monitor_client.aio.operations_async.ActivityLogAlertsOperations
    :ivar activity_logs: ActivityLogsOperations operations
    :vartype activity_logs: monitor_client.aio.operations_async.ActivityLogsOperations
    :ivar event_categories: EventCategoriesOperations operations
    :vartype event_categories: monitor_client.aio.operations_async.EventCategoriesOperations
    :ivar tenant_activity_logs: TenantActivityLogsOperations operations
    :vartype tenant_activity_logs: monitor_client.aio.operations_async.TenantActivityLogsOperations
    :ivar metric_definitions: MetricDefinitionsOperations operations
    :vartype metric_definitions: monitor_client.aio.operations_async.MetricDefinitionsOperations
    :ivar metrics: MetricsOperations operations
    :vartype metrics: monitor_client.aio.operations_async.MetricsOperations
    :ivar metric_baseline: MetricBaselineOperations operations
    :vartype metric_baseline: monitor_client.aio.operations_async.MetricBaselineOperations
    :ivar baselines: BaselinesOperations operations
    :vartype baselines: monitor_client.aio.operations_async.BaselinesOperations
    :ivar metric_alerts: MetricAlertsOperations operations
    :vartype metric_alerts: monitor_client.aio.operations_async.MetricAlertsOperations
    :ivar metric_alerts_status: MetricAlertsStatusOperations operations
    :vartype metric_alerts_status: monitor_client.aio.operations_async.MetricAlertsStatusOperations
    :ivar scheduled_query_rules: ScheduledQueryRulesOperations operations
    :vartype scheduled_query_rules: monitor_client.aio.operations_async.ScheduledQueryRulesOperations
    :ivar metric_namespaces: MetricNamespacesOperations operations
    :vartype metric_namespaces: monitor_client.aio.operations_async.MetricNamespacesOperations
    :ivar vm_insights: VMInsightsOperations operations
    :vartype vm_insights: monitor_client.aio.operations_async.VMInsightsOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: azure.core.credentials.TokenCredential
    :param subscription_id: The Azure subscription Id.
    :type subscription_id: str
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "TokenCredential",
        subscription_id: str,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = MonitorClientConfiguration(credential, subscription_id, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.autoscale_settings = AutoscaleSettingsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operations = Operations(
            self._client, self._config, self._serialize, self._deserialize)
        self.alert_rule_incidents = AlertRuleIncidentsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.alert_rules = AlertRulesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.log_profiles = LogProfilesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.diagnostic_settings = DiagnosticSettingsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.diagnostic_settings_category = DiagnosticSettingsCategoryOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.action_groups = ActionGroupsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.activity_log_alerts = ActivityLogAlertsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.activity_logs = ActivityLogsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.event_categories = EventCategoriesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.tenant_activity_logs = TenantActivityLogsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.metric_definitions = MetricDefinitionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.metrics = MetricsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.metric_baseline = MetricBaselineOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.baselines = BaselinesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.metric_alerts = MetricAlertsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.metric_alerts_status = MetricAlertsStatusOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.scheduled_query_rules = ScheduledQueryRulesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.metric_namespaces = MetricNamespacesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.vm_insights = VMInsightsOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "MonitorClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
